移动端：运行在移动设备上的产品
移动设备：手机、平板、I TOUCH..
我们以后做的产品大部分都只需要适配IOS系统和安卓系统即可

响应式布局：在不同的设备上都能给予客户最好的操作体验

产品:
App：手机应用，目前市面上流行的APP产品大部分都是原生APP开发者做的 IOS:OBJECT_C
安卓：JAVA-NATIVE
    目前市场上正在趋于使用JS来开发原生的APP：React Native、phoneGap...
H5：
    HTML页面,都是运行在浏览器中的（PC端浏览器【谷歌、火狐、safari、欧朋、IE、360、搜狗】或者是移动端的浏览器[内置的、UC、QQ、百度、谷歌、safari]->在IOS和安卓平台上的浏览器大部分都是webkit内核的，所以移动端我们做的H5页面不用像PC端一样那样的去处理浏览器的兼容）    

以后工作中我们这一类前端开发工程师主要做的产品形态都有哪些：
->做一个HTML页面，即需要在PC端访问也需要在移动端访问，比如：猎豹、华为
->PC端和移动端用的是不同的项目，例如：京东、淘宝、QQ...,PC端的项目不需要做响应式，移动端的项目需要做响应式
->在移动端我们开发出来的HTML页面（H5）运行的环境：
    移动端的浏览器：UC、QQ、百度...
    原生APP（Native App）的webView中：hyBride模拟 例如：在微信中打开一个H5页面，我们的H5其实就是运行在微信的webView中的

hyBride模式：
->把我们开发的H5页面嵌入到Native APP的webview中运行（所谓的webView你可以简单的理解为一个浏览器，也是webKit）


响应式布局
->搭建一个H5页面，我们需要在HEAD中添加一个META标签
<meta name="viewport" content="width=device-width, initial-scale=1.0">

viewport:视口
    width=device-width 设置视口的宽度等于设备的宽度，如果不设置的话，默认视口的宽度是980px->通俗理解：我们这个操作实际是告诉当前的浏览器按照多少宽度来渲染页面，换句话说就是展示当前这个页面的区域一共有多宽(浏览器的宽度)
    user-scalable=no:禁止用户手动缩放
    initial-scale=1.0:设置屏幕最大，最小，默认的缩放比例
    maximum-scale=1.0
    minimum-scale=1.0

->高清屏
    苹果手机是2倍高清屏幕，也就是我们在手机上看到的那张100*100图片，其实苹果手机是按200*200的尺寸给我们进行渲染的，这样的话，如果我们真实图片本身才是100*100，最后呈现出就是被拉伸后变模糊的效果
    ->苹果手机上需要的素材图片都是需要比看到的尺寸大一倍才可以

    DPI适配思想：
    我们在做页面的时候，最好每一张素材图片都准备两套或者三套，比如
    logo.png 100*100
    logo@2x.png 200*200
    logo@3x.png 300*300
    ...

    媒体查询：@media
    ->媒体设备:all所有设备 screen所有屏幕设备PC+移动端 print打印机设备
    ->媒体条件:指定在什么样的条件下执行对应的样式
    @media all and (max-width:319px){//->宽度小于320px

    }
    @media all and (min-width:320px) and (max-width:359px){
        //-> >=320 <360
    }
苹果手机的尺寸：5s及以下都是320px 6是375px宽度 6plus是414px宽度
常用的安卓机尺寸：320、360、480、540、640、720...

在真实项目中，设计师给我们的设计稿一般都是：640*960 / 640*1136 / 750*1334

->响应式布局的解决方案
    1）流式布局法
        ->容器或者合资的宽度一般都是不写固定的值，而是使用百分比（相对于视口区域的百分比）
        ->其余的样式：字体、高度、margin、padding等等都按照设计稿上标准尺寸的一半来设置
        ->对于有些屏幕尺寸下，我们设置的固定值看起来不是特别好看的话，使用@media进行微调
    特殊情况：设计师的设计稿是640px，我们的素材图也是640px的，这样的话在iphone6/iphone6 plus展示的时候，图片不够大，对于这种情况我们需要单独的找设计师要一张更大的图（1280px）
    @media all and (-webkit-min-device-pixel-ratio:2) and (min-width:321px){
        .box{
            background:url("banner@big.png")...
        }
    }
    @media all and (min-width:641px){
        .box{
            background:url("banner@big.png")...
        }
    }


    2)REM响应式布局
        ->我们做的H5页面只在移动端访问（REM不兼容低版本的浏览器）
        第一步:从UI设计师拿到设计稿（PSD格式的设计稿）640*1136
        第二步:在样式中给HTML设定一个fontSize的值，我们一般都设置一个方便后面计算的值,例如:10px 100px...这里我们之所以用100px，主要是浏览器最小的字体大小都是12px，用10px比例计算的结果和真实UI设计稿会存在那么一点点的偏差
            html{
                font-size:50px;/*1REM=100px*/
            }
        第三步：写页面，写样式
        完全按照设计稿的尺寸来写样式，此时不用管任何的事情，设计稿给你的宽度，高度，字体大小，margin、padding的值是多少，我们就写多少
        ->但是我们在写样式值的时候，需要把等到的像素值除以100，计算出对应的REM的值，我们设定的也都是REM的值（值的注意的是，真实项目中外层盒子的宽度我们一般还是不写固定值，沿用流式布局法的思想，我们用百分比的方式布局）
        第四步：根据当前屏幕的宽度和设计稿的宽度来计算我们HTML的fontSize的值
            <script charset="utf-8" type="text/javascript">
                //->根据当前屏幕宽度和设计稿宽度的比例，动态计算一下当前宽度下的font-size值应该是多少，如果fontSize的值改变了，之前设定的所有REM单位的值自动会跟着放大或者缩小
                ~function(){
                    var desW=640,
                        winW=document.documentElement.clientWidth,
                        ratio=winW/desW;
                    var oMain=document.getElementById("main");
                    if(winW>desW){
                        oMain.style.width=desW+"px";
                        oMain.style.margin="0 auto";
                        return;
                        }
                    document.documentElement.style.fontSize=ratio*100+"px";
                }();
            </script>


使用GitHub发布项目
->GitHub:
    https://github.com/ 一个网站,网站搭建了一个供用户管理代码的平台（而且是基于GIT操作进行管理的一个平台）
    GitHub在全世界都是比较权威的，我们前端开发工程师所需要的框架，类库，插件的源代码基本上都是GitHub上有托管
    建议：初期回去后先把自己所了解的关于框架、类库、插件的源代码在GitHub上找到，然后Fork到自己的仓库一份，以后有时间尽量去研究一下源代码：后期当自己有一定能力的时候，写一些插件或者类库，上传到GitHub上供别人研究使用，培养自己的粉丝...

    GitHub还有一个作用：可以在这个平台上发布前端的项目文件（GitHub本身就是一个资源文件托管的平台，我们把项目资源文件上传到这个平台下，平台帮我们发布，以后只需要输入对应的网址就可以把这个平台中托管文件的源代码返回到用户的客户端进行渲染）
->使用GitHub
  GitHub中的一个账号可以创建多个仓库，每一个仓库一般只存储和管理一个项目
  README.MD文件是对仓库的说明，里面的内容采用的是MARK语法进行编写

  通过$ git clone xxx.git把远程仓库中的文件下载到本地，此时本地的这个文件夹就和我们的远程仓库保持了链接，我们可以通过连接把本地的文件推送到远程仓库上，也可以从远程仓库上下载最新的文件等

->使用GitHub发布项目，创建自己的静态博客：
    1.创建一个新的仓库（新仓库默认只有一个主分支master，我们如果要托管的是源代码的话，都是把源代码上传到master这个分支下->$git push origin master）
    2.基于当前仓库发布我们的博客
        Settings->Optinons->GitHub Pages->Theme Chooser
        ->https://bingyezisu.github.io/myBlog/
    github在访问页面的时候，如果不指定具体访问的xxx.html的话，默认找index.html,所以我们使用生成的地址可以不用编写myBlog/index.html,但是注意只有index.html才可以省略
    3.把当前仓库克隆到到本地
    4.把自己需要上传的项目上传的远程仓库

移动端事件
PC：click mouseover mouseout mouseenter mouseleave mousemove mousedown mouseup mousewheel keydown keyup load scroll blur focus change...
移动端：click(单击) load scroll blue focus change...input(代替keyup keydown)
       TOUCH事件模型（处理单手指操作）、GESTURE事件模型（处理多手指操作）
       TOUCH:touchstart touchmove touchend touchcancle
       GESTURE:gesturestart gesturechange gestureend

1、click:在移动端click属于单击事件，不是点击事件，在移动端的项目中我们经常回区分单击做什么和双击做什么，所以移动端的浏览器在识别click的时候，只有确定是单击后才会把他执行；在移动端使用click会存在300ms的延迟：浏览器在第一次点击结束后，还需要等到300ms看是否触发了第二次点击，如果触发了第二次点击就不属于click了，没有触发第二次点击才属于click；
2、点击、单击、双击、长按
    单击和双击（300ms）
    点击和长按（750ms）
    点击和滑动（X/Y偏移的距离是否在30px以内，超过30px就是滑动）
    左右滑动和上下滑动（x轴偏移的距离>y轴偏移的距离=左右滑 相反就是上下滑）
    左滑和右滑（偏移的距离>0=右滑 相反就是左滑）
3、移动端事件库
    ->FastClick.js：解决CLICK事件300MS的延迟
    ->TOUCH.JS:百度云手势事件库 https://github.com/Clouda-team/touch.code.baidu.com
               API:https://blog.csdn.net/wangjiaohome/article/details/49364177
    ->HAMMER.JS https://hammerjs.github.io/
    ->Zepto.js:被誉为移动端的小型JQ。
        JQ由于是在PC端使用的，所以代码中包含了大量的对于IE低版本浏览器的兼容处理，而Zepto应用于移动端开发，所以在JQ基础上没有低版本的IE进行支持
        JQ中提供了很多的选择器类型及DOM操作方法，但是ZEPTO中只是实现了部分常用的选择器和方法
        ==>ZEPTO的源代码大小比JQ小很多
